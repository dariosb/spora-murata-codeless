/**
 ****************************************************************************************
 *
 * @file user_codeless.h
 *
 * @brief codeless project header file.
 *
 * Copyright (C) 2017 Dialog Semiconductor. This computer program includes Confidential, 
 * Proprietary Information of Dialog Semiconductor. All Rights Reserved. This software 
 * is solely for use on authorized Dialog Semiconductor products and platforms. 
 * Recipient shall not transmit any software source code to any third party without
 * Dialog Semiconductor's prior written permission. 
 * 
 * TO THE FULLEST EXTENT PERMITTED BY LAW, THE SOFTWARE IS DELIVERED “AS IS”, WITHOUT 
 * WARRANTIES OR CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED.
 *
 ****************************************************************************************
 */

#ifndef _USER_codeless_H_
#define _USER_codeless_H_

/**
 ****************************************************************************************
 * @addtogroup APP
 * @ingroup RICOW
 *
 * @brief 
 *
 * @{
 ****************************************************************************************
 */

/*
 * INCLUDE FILES
 ****************************************************************************************
 */

#include "rwble_config.h"
#include "app_task.h"                  // application task
#include "gapc_task.h"                 // gap functions and messages
#include "gapm_task.h"                 // gap functions and messages
#include "app.h"                       // application definitions
#include "co_error.h"                  // error code definitions
#include "smpc_task.h"                 // error code definitions
 

/****************************************************************************
Add here supported profiles' application header files.
i.e.
#if (BLE_DIS_SERVER)
#include "app_dis.h"
#include "app_dis_task.h"
#endif
*****************************************************************************/


/*
 * FUNCTION DECLARATIONS
 ****************************************************************************************
 */

//--------------------------------------------------------------------------------------------------------/
//     _____                             _   _               _____    _        _     _ _     _              _ 
//    /  __ \                           | | (_)             |  ___|  | |      | |   | (_)   | |            | |
//    | /  \/ ___  _ __  _ __   ___  ___| |_ _  ___  _ __   | |__ ___| |_ __ _| |__ | |_ ___| |__   ___  __| |
//    | |    / _ \| '_ \| '_ \ / _ \/ __| __| |/ _ \| '_ \  |  __/ __| __/ _` | '_ \| | / __| '_ \ / _ \/ _` |
//    | \__/\ (_) | | | | | | |  __/ (__| |_| | (_) | | | | | |__\__ \ || (_| | |_) | | \__ \ | | |  __/ (_| |
//     \____/\___/|_| |_|_| |_|\___|\___|\__|_|\___/|_| |_| \____/___/\__\__,_|_.__/|_|_|___/_| |_|\___|\__,_|
//                                                                                                                                                                                                                    
// This event is called when a Bluetooth connection is established   
void user_on_connection(uint8_t connection_idx, struct gapc_connection_req_ind const *param);
//

//     _____                             _   _              ______    _ _          _ 
//    /  __ \                           | | (_)             |  ___|  (_) |        | |
//    | /  \/ ___  _ __  _ __   ___  ___| |_ _  ___  _ __   | |_ __ _ _| | ___  __| |
//    | |    / _ \| '_ \| '_ \ / _ \/ __| __| |/ _ \| '_ \  |  _/ _` | | |/ _ \/ _` |
//    | \__/\ (_) | | | | | | |  __/ (__| |_| | (_) | | | | | || (_| | | |  __/ (_| |
//     \____/\___/|_| |_|_| |_|\___|\___|\__|_|\___/|_| |_| \_| \__,_|_|_|\___|\__,_|
//
// Connection attempt failed or was cancelled by user
void user_on_connect_failed(void);
//

//--------------------------------------------------------------------------------------------------------/
//     _____                             _   _               _____                   _             _           _ 
//    /  __ \                           | | (_)             |_   _|                 (_)           | |         | |
//    | /  \/ ___  _ __  _ __   ___  ___| |_ _  ___  _ __     | | ___ _ __ _ __ ___  _ _ __   __ _| |_ ___  __| |
//    | |    / _ \| '_ \| '_ \ / _ \/ __| __| |/ _ \| '_ \    | |/ _ \ '__| '_ ` _ \| | '_ \ / _` | __/ _ \/ _` |
//    | \__/\ (_) | | | | | | |  __/ (__| |_| | (_) | | | |   | |  __/ |  | | | | | | | | | | (_| | ||  __/ (_| |
//     \____/\___/|_| |_|_| |_|\___|\___|\__|_|\___/|_| |_|   \_/\___|_|  |_| |_| |_|_|_| |_|\__,_|\__\___|\__,_|
//                                                                                                               
// This event is triggered when an existing Bluetooth connection is terminated                                                                                                              
void user_on_disconnect( struct gapc_disconnect_ind const *param );
//


//--------------------------------------------------------------------------------------------------------/
//     _   _  ___  ______ _____   _____               _  ______              _               _ 
//    | | | |/ _ \ | ___ \_   _| /  __ \             | | | ___ \            (_)             | |
//    | | | / /_\ \| |_/ / | |   | /  \/_ __ ___   __| | | |_/ /___  ___ ___ ___   _____  __| |
//    | | | |  _  ||    /  | |   | |   | '_ ` _ \ / _` | |    // _ \/ __/ _ \ \ \ / / _ \/ _` |
//    | |_| | | | || |\ \  | |   | \__/\ | | | | | (_| | | |\ \  __/ (_|  __/ |\ V /  __/ (_| |
//     \___/\_| |_/\_| \_| \_/    \____/_| |_| |_|\__,_| \_| \_\___|\___\___|_| \_/ \___|\__,_|
//                                                                                             
// This event is triggered when a carriage-return character is received via UART     
void user_on_dev_config_complete(void);
//


//--------------------------------------------------------------------------------------------------------/
//      ____ _______   ______               _     _                     _ _           
//     |  _ \__   __| |  ____|             | |   | |                   | | |          
//     | |_) | | |    | |____   _____ _ __ | |_  | |__   __ _ _ __   __| | | ___ _ __ 
//     |  _ <  | |    |  __\ \ / / _ \ '_ \| __| | '_ \ / _` | '_ \ / _` | |/ _ \ '__|
//     | |_) | | |    | |___\ V /  __/ | | | |_  | | | | (_| | | | | (_| | |  __/ |   
//     |____/  |_|    |______\_/ \___|_| |_|\__| |_| |_|\__,_|_| |_|\__,_|_|\___|_|                                                                                                                                            
//
// Handles Bluetooth GATT events
void user_catch_rest_hndl(ke_msg_id_t const msgid, void const *param,ke_task_id_t const dest_id, ke_task_id_t const src_id);
//


//--------------------------------------------------------------------------------------------------------/
//      ___      _                _   _          
//     / _ \    | |              | | (_)         
//    / /_\ \ __| |_   _____ _ __| |_ _ ___  ___ 
//    |  _  |/ _` \ \ / / _ \ '__| __| / __|/ _ \
//    | | | | (_| |\ V /  __/ |  | |_| \__ \  __/
//    \_| |_/\__,_| \_/ \___|_|   \__|_|___/\___|
//
// Starts a Bluetooth advertisement                        
void user_advertise(void);
//


//--------------------------------------------------------------------------------------------------------/
//      ___      _                _   _            _____ _              
//     / _ \    | |              | | (_)          /  ___| |             
//    / /_\ \ __| |_   _____ _ __| |_ _ ___  ___  \ `--.| |_ ___  _ __  
//    |  _  |/ _` \ \ / / _ \ '__| __| / __|/ _ \  `--. \ __/ _ \| '_ \ 
//    | | | | (_| |\ V /  __/ |  | |_| \__ \  __/ /\__/ / || (_) | |_) |
//    \_| |_/\__,_| \_/ \___|_|   \__|_|___/\___| \____/ \__\___/| .__/ 
//                                                               | |    
//                                                               |_|    
// Called when advertising stops
void user_on_adv_stop(const uint8_t);
//


//--------------------------------------------------------------------------------------------------------/                                                   |_|                                                          
//      ___      _        ______                      _    ______              _               _ 
//     / _ \    | |       | ___ \                    | |   | ___ \            (_)             | |
//    / /_\ \ __| |_   __ | |_/ /___ _ __   ___  _ __| |_  | |_/ /___  ___ ___ ___   _____  __| |
//    |  _  |/ _` \ \ / / |    // _ \ '_ \ / _ \| '__| __| |    // _ \/ __/ _ \ \ \ / / _ \/ _` |
//    | | | | (_| |\ V /  | |\ \  __/ |_) | (_) | |  | |_  | |\ \  __/ (_|  __/ |\ V /  __/ (_| |
//    \_| |_/\__,_| \_(_) \_| \_\___| .__/ \___/|_|   \__| \_| \_\___|\___\___|_| \_/ \___|\__,_|
//                                  | |                                                          
//                                  |_|                                                          
// Display advertising reports    
void user_on_adv_report_ind(struct gapm_adv_report_ind const * param);
//


//--------------------------------------------------------------------------------------------------------/
//     _____      _ _   _       _ _          _   _             
//    |_   _|    (_) | (_)     | (_)        | | (_)            
//      | | _ __  _| |_ _  __ _| |_ ______ _| |_ _  ___  _ __  
//      | || '_ \| | __| |/ _` | | |_  / _` | __| |/ _ \| '_ \ 
//     _| || | | | | |_| | (_| | | |/ / (_| | |_| | (_) | | | |
//     \___/_| |_|_|\__|_|\__,_|_|_/___\__,_|\__|_|\___/|_| |_|
// Initialization, runs only once                                                             
void user_app_on_init(void);
//


//--------------------------------------------------------------------------------------------------------/
//     _____                   _____                       _      _           _ 
//    /  ___|                 /  __ \                     | |    | |         | |
//    \ `--.  ___ __ _ _ __   | /  \/ ___  _ __ ___  _ __ | | ___| |_ ___  __| |
//     `--. \/ __/ _` | '_ \  | |    / _ \| '_ ` _ \| '_ \| |/ _ \ __/ _ \/ _` |
//    /\__/ / (_| (_| | | | | | \__/\ (_) | | | | | | |_) | |  __/ ||  __/ (_| |
//    \____/ \___\__,_|_| |_|  \____/\___/|_| |_| |_| .__/|_|\___|\__\___|\__,_|
//                                                  | |                         
//                                                  |_|                         
// Bluetooth scan has completed  
void user_scan_completed(uint8_t status);
//


//     ______ ______ ______ ______ ______ ______ ______ ______ ______ ______ ______ ______ ______ ______ ______ 
//    |______|______|______|______|______|______|______|______|______|______|______|______|______|______|______|
//                                                                                                              

/// @} APP

#endif // _USER_codeless_H_
